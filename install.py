#!/usr/bin/env python3
"""
Script de instalaci√≥n autom√°tica para el m√≥dulo todolist-tree
============================================================

Este script instala autom√°ticamente el m√≥dulo todolist-tree siguiendo las 
mejores pr√°cticas de HyDE para m√≥dulos waybar.

Caracter√≠sticas:
- Detecta autom√°ticamente el nombre de usuario
- Busca o crea el layout espec√≠fico del usuario (usuario.jsonc)
- Instala scripts en ~/.local/bin/
- Crea la configuraci√≥n del m√≥dulo en waybar
- Actualiza autom√°ticamente includes.json
- Integra el m√≥dulo en el layout del usuario
"""

import os
import shutil
import json
import subprocess
import sys
import re
from pathlib import Path
from getpass import getuser

class HyDETodolistInstaller:
    def __init__(self):
        self.user = getuser()
        self.project_dir = Path(__file__).parent
        self.home = Path.home()
        self.config_waybar = self.home / ".config" / "waybar"
        self.local_bin = self.home / ".local" / "bin"
        self.modules_dir = self.config_waybar / "modules"
        self.layouts_dir = self.config_waybar / "layouts"
        self.includes_file = self.config_waybar / "includes" / "includes.json"
        
        # Layout espec√≠fico del usuario
        self.user_layout = self.layouts_dir / f"{self.user}.jsonc"
        
        # Archivos del m√≥dulo todolist
        self.scripts = [
            "scripts/current.py",
            "scripts/choose_and_check.py"
        ]
        
        # Configuraci√≥n del m√≥dulo
        self.module_config = {
            "custom/todolist": {
                "format": "üìù {}",
                "exec": str(self.local_bin / "current.py"),
                "interval": 5,
                "return-type": "json",
                "tooltip": True,
                "on-click": str(self.local_bin / "choose_and_check.py"),
                "on-click-right": str(self.local_bin / "choose_and_check.py")
            }
        }

    def check_dependencies(self):
        """Verificar dependencias necesarias"""
        print("üîç Verificando dependencias...")
        
        dependencies = {
            "HyDE waybar.py": self.home / ".local" / "lib" / "hyde" / "waybar.py",
            "Directorio waybar": self.config_waybar,
            "Directorio modules": self.modules_dir,
            "Directorio layouts": self.layouts_dir
        }
        
        missing = []
        for name, path in dependencies.items():
            if path.exists():
                print(f"   ‚úÖ {name}: Encontrado")
            else:
                print(f"   ‚ùå {name}: No encontrado en {path}")
                missing.append(name)
        
        if missing:
            print(f"\n‚ùå Dependencias faltantes: {', '.join(missing)}")
            print("   Este script requiere HyDE instalado y configurado")
            return False
        
        return True

    def create_directories(self):
        """Crear directorios necesarios"""
        print("üìÅ Creando directorios...")
        
        directories = [
            self.local_bin,
            self.modules_dir,
            self.layouts_dir,
            self.config_waybar / "includes",
            self.home / ".local" / "share" / "todolist"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ {directory}")

    def install_scripts(self):
        """Instalar scripts en ~/.local/bin/"""
        print("üìú Instalando scripts...")
        
        missing_scripts = []
        
        for script in self.scripts:
            src = self.project_dir / script
            # Solo usar el nombre del archivo para el destino, no la ruta completa
            script_name = Path(script).name
            dst = self.local_bin / script_name
            
            if not src.exists():
                print(f"   ‚ùå Script no encontrado: {src}")
                missing_scripts.append(script)
                continue
                
            # Copiar script y actualizar rutas
            content = src.read_text(encoding='utf-8')
            
            # Actualizar ruta del archivo de tareas
            old_path = 'script_dir / "todolist.md"'
            new_path = f'Path.home() / ".local" / "share" / "todolist" / "todolist.md"'
            content = content.replace(old_path, new_path)
            
            # Escribir script actualizado
            dst.write_text(content, encoding='utf-8')
            dst.chmod(0o755)
            
            print(f"   ‚úÖ {script} ‚Üí {dst}")
        
        if missing_scripts:
            print(f"   ‚ö†Ô∏è  Scripts faltantes: {', '.join(missing_scripts)}")
            return False
        
        return True

    def setup_data_file(self):
        """Configurar archivo de datos de tareas"""
        print("üìÑ Configurando archivo de tareas...")
        
        data_dir = self.home / ".local" / "share" / "todolist"
        data_file = data_dir / "todolist.md"
        
        if not data_file.exists():
            # Crear archivo inicial
            initial_content = """# Lista de tareas con estructura

- [ ] Proyecto Principal 1
    - [ ] Subtarea 1.1
        - [ ] Sub-subtarea 1.1.1
        - [ ] Sub-subtarea 1.1.2
    - [ ] Subtarea 1.2
- [ ] Proyecto Principal 2
    - [ ] Subtarea 2.1
- [ ] Tarea Independiente
"""
            data_file.write_text(initial_content, encoding='utf-8')
            print(f"   ‚úÖ Archivo inicial creado: {data_file}")
        else:
            print(f"   ‚úÖ Archivo existente: {data_file}")

    def create_waybar_module(self):
        """Crear configuraci√≥n del m√≥dulo para waybar"""
        print("üß© Creando m√≥dulo waybar...")
        
        module_file = self.modules_dir / "custom-todolist.jsonc"
        
        # Escribir configuraci√≥n
        with open(module_file, 'w', encoding='utf-8') as f:
            json.dump(self.module_config, f, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ M√≥dulo creado: {module_file}")

    def detect_or_create_user_layout(self):
        """Detectar o crear el layout del usuario"""
        print(f"üé® Procesando layout del usuario: {self.user}.jsonc...")
        
        if self.user_layout.exists():
            print(f"   ‚úÖ Layout existente encontrado: {self.user_layout}")
            return self.update_existing_layout()
        else:
            print(f"   üìù Creando nuevo layout: {self.user_layout}")
            return self.create_new_layout()

    def update_existing_layout(self):
        """Actualizar layout existente a√±adiendo el m√≥dulo tree"""
        try:
            with open(self.user_layout, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parsear JSON con comentarios (JSONC)
            # Remover comentarios para parsing
            json_content = re.sub(r'//.*?\n', '\n', content)
            json_content = re.sub(r'/\*.*?\*/', '', json_content, flags=re.DOTALL)
            
            layout = json.loads(json_content)
            
            # Verificar si ya existe el m√≥dulo
            modules_to_check = []
            
            # Buscar en todos los grupos
            for key, value in layout.items():
                if isinstance(value, dict) and "modules" in value:
                    modules_to_check.extend(value["modules"])
            
            if "custom/todolist" in modules_to_check:
                print("   ‚ö†Ô∏è  M√≥dulo custom/todolist ya existe en el layout")
                return True
            
            # Crear grupo dedicado para todolist
            tree_group = "group/pill#todolist"
            
            # Verificar si el grupo ya existe
            if tree_group in layout:
                if "custom/todolist" not in layout[tree_group]["modules"]:
                    layout[tree_group]["modules"].append("custom/todolist")
                    print(f"   ‚úÖ M√≥dulo a√±adido al grupo existente: {tree_group}")
                else:
                    print(f"   ‚ö†Ô∏è  M√≥dulo ya existe en grupo: {tree_group}")
            else:
                # Crear nuevo grupo todolist
                layout[tree_group] = {
                    "orientation": "inherit",
                    "modules": ["custom/todolist"]
                }
                
                # A√±adir grupo a modules-left si existe
                if "modules-left" in layout:
                    if tree_group not in layout["modules-left"]:
                        layout["modules-left"].append(tree_group)
                        print(f"   ‚úÖ Grupo a√±adido a modules-left: {tree_group}")
                else:
                    # Crear modules-left si no existe
                    layout["modules-left"] = [tree_group]
                    print(f"   ‚úÖ modules-left creado con grupo: {tree_group}")
                
                print(f"   ‚úÖ Nuevo grupo todolist creado: {tree_group}")
            
            # Guardar layout actualizado preservando formato JSONC
            updated_json = json.dumps(layout, indent=4, ensure_ascii=False)
            with open(self.user_layout, 'w', encoding='utf-8') as f:
                f.write(updated_json)
            
            print(f"   ‚úÖ Layout actualizado: {self.user_layout}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error actualizando layout: {e}")
            return False

    def create_new_layout(self):
        """Crear nuevo layout b√°sico con el m√≥dulo tree"""
        try:
            # Layout b√°sico inspirado en la estructura existente
            new_layout = {
                "layer": "top",
                "output": ["*"],
                "height": 10,
                "exclusive": True,
                "passthrough": False,
                "reload_style_on_change": True,
                "include": [
                    "$XDG_CONFIG_HOME/waybar/modules/*json*",
                    "$XDG_CONFIG_HOME/waybar/includes/includes.json"
                ],
                "modules-left": [
                    "group/pill#todolist"
                ],
                "group/pill#todolist": {
                    "orientation": "inherit",
                    "modules": [
                        "custom/todolist"
                    ]
                },
                "modules-center": [
                    "group/pill#center"
                ],
                "group/pill#center": {
                    "modules": [
                        "hyprland/workspaces",
                        "hyprland/window"
                    ],
                    "orientation": "inherit"
                },
                "modules-right": [
                    "group/pill#right1"
                ],
                "group/pill#right1": {
                    "modules": [
                        "clock",
                        "battery"
                    ],
                    "orientation": "inherit"
                }
            }
            
            with open(self.user_layout, 'w', encoding='utf-8') as f:
                json.dump(new_layout, f, indent=4, ensure_ascii=False)
            
            print(f"   ‚úÖ Nuevo layout creado: {self.user_layout}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error creando layout: {e}")
            return False

    def update_waybar_includes(self):
        """Actualizar includes.json usando waybar.py de HyDE"""
        print("üîÑ Actualizando configuraci√≥n de waybar...")
        
        try:
            waybar_py = self.home / ".local" / "lib" / "hyde" / "waybar.py"
            
            # Regenerar includes.json
            subprocess.run([
                str(waybar_py), "--generate-includes"
            ], check=True, capture_output=True, text=True)
            
            print("   ‚úÖ includes.json actualizado")
            
            # Verificar que el m√≥dulo est√° incluido
            if self.includes_file.exists():
                with open(self.includes_file, 'r') as f:
                    content = f.read()
                    if "custom-todolist.jsonc" in content:
                        print("   ‚úÖ M√≥dulo todolist detectado en includes.json")
                    else:
                        print("   ‚ö†Ô∏è  M√≥dulo no detectado en includes.json")
            
            # Actualizar configuraci√≥n completa
            subprocess.run([
                str(waybar_py), "--update"
            ], check=True, capture_output=True, text=True)
            
            print("   ‚úÖ Configuraci√≥n waybar sincronizada")
            
        except subprocess.CalledProcessError as e:
            print(f"   ‚ö†Ô∏è  Error al actualizar waybar: {e}")
            print("      Ejecuta manualmente:")
            print("      ~/.local/lib/hyde/waybar.py --generate-includes")
            print("      ~/.local/lib/hyde/waybar.py --update")

    def show_completion_message(self):
        """Mostrar mensaje de finalizaci√≥n"""
        print("\nüéâ ¬°Instalaci√≥n del m√≥dulo todolist-tree completada!")
        print("=" * 60)
        print("üìã Resumen de la instalaci√≥n:")
        print()
        print(f"   üë§ Usuario detectado: {self.user}")
        print(f"   üìÑ Layout utilizado: {self.user_layout}")
        print(f"   üìú Scripts instalados en: {self.local_bin}")
        print(f"   üìÅ Datos de tareas en: ~/.local/share/todolist/")
        print(f"   üß© M√≥dulo waybar: custom/todolist")
        print()
        print("üéÆ C√≥mo usar:")
        print("   ‚Ä¢ El m√≥dulo aparecer√° autom√°ticamente en waybar")
        print("   ‚Ä¢ Click izquierdo: Abrir interfaz rofi")
        print("   ‚Ä¢ Click derecho: Abrir interfaz rofi")
        print("   ‚Ä¢ Tooltip: Ver estructura completa de tareas")
        print()
        print("üìù Editar tareas:")
        print(f"   nano ~/.local/share/todolist/todolist.md")
        print()
        print("üîß Comandos directos:")
        print(f"   {self.local_bin}/current.py                    # Ver primera tarea")
        print(f"   {self.local_bin}/current.py \"nombre tarea\"     # Marcar tarea")
        print(f"   {self.local_bin}/choose_and_check.py           # Interfaz rofi")
        print()
        print("üîÑ Para aplicar cambios de layout:")
        print("   hyde-shell waybar -S    # Selector interactivo")
        print("   # o")
        print("   ~/.local/lib/hyde/waybar.py --update")
        print()
        print("üéØ Caracter√≠sticas del m√≥dulo todolist:")
        print("   ‚úÖ Estructura jer√°rquica de tareas")
        print("   ‚úÖ Propagaci√≥n autom√°tica (completar subtareas ‚Üí completar padre)")
        print("   ‚úÖ Funciona con tareas simples (1 nivel) y complejas (multi-nivel)")
        print("   ‚úÖ Interfaz rofi integrada")
        print("   ‚úÖ Tooltips informativos")
        print("   ‚úÖ Integraci√≥n completa con HyDE")

    def run(self):
        """Ejecutar instalaci√≥n completa"""
        print("üìù Instalador del M√≥dulo Todolist para HyDE")
        print("=" * 60)
        
        try:
            if not self.check_dependencies():
                sys.exit(1)
            
            self.create_directories()
            
            if not self.install_scripts():
                print("‚ùå Error: No se pudieron instalar todos los scripts")
                sys.exit(1)
            
            self.setup_data_file()
            self.create_waybar_module()
            self.detect_or_create_user_layout()
            self.update_waybar_includes()
            self.show_completion_message()
            
        except Exception as e:
            print(f"‚ùå Error durante la instalaci√≥n: {e}")
            sys.exit(1)

if __name__ == "__main__":
    installer = HyDETodolistInstaller()
    installer.run()
