#!/usr/bin/env python3
"""
Script de desinstalaci√≥n del m√≥dulo todolist-tree
================================================

Este script elimina completamente el m√≥dulo todolist-tree del sistema,
revirtiendo todos los cambios realizados por el instalador.
"""

import os
import shutil
import json
import subprocess
import sys
import re
from pathlib import Path
from getpass import getuser

class HyDETodolistUninstaller:
    def __init__(self):
        self.user = getuser()
        self.home = Path.home()
        self.config_waybar = self.home / ".config" / "waybar"
        self.local_bin = self.home / ".local" / "bin"
        self.modules_dir = self.config_waybar / "modules"
        self.layouts_dir = self.config_waybar / "layouts"
        self.includes_file = self.config_waybar / "includes" / "includes.json"
        
        # Layout espec√≠fico del usuario
        self.user_layout = self.layouts_dir / f"{self.user}.jsonc"
        
        # Archivos a eliminar
        self.files_to_remove = [
            self.local_bin / "current.py",
            self.local_bin / "choose_and_check.py",
            self.modules_dir / "custom-todolist.jsonc",
        ]
        
        # Directorio de datos (opcional)
        self.data_dir = self.home / ".local" / "share" / "todolist"

    def confirm_uninstall(self):
        """Confirmar desinstalaci√≥n con el usuario"""
        print("‚ö†Ô∏è  Desinstalaci√≥n del m√≥dulo todolist")
        print("=" * 50)
        print("Se eliminar√°n los siguientes elementos:")
        print()
        
        for file_path in self.files_to_remove:
            if file_path.exists():
                print(f"   üóëÔ∏è  {file_path}")
        
        if self.data_dir.exists():
            print(f"   üìÅ {self.data_dir} (OPCIONAL - contiene tus tareas)")
        
        if self.user_layout.exists():
            print(f"   ‚úèÔ∏è  M√≥dulo removido de: {self.user_layout}")
        
        print()
        response = input("¬øContinuar con la desinstalaci√≥n? [y/N]: ").lower().strip()
        return response in ['y', 'yes', 's√≠', 'si']

    def remove_scripts(self):
        """Eliminar scripts de ~/.local/bin/"""
        print("üóëÔ∏è  Eliminando scripts...")
        
        removed = []
        for script_path in [self.local_bin / "current.py", self.local_bin / "choose_and_check.py"]:
            if script_path.exists():
                script_path.unlink()
                removed.append(script_path.name)
                print(f"   ‚úÖ Eliminado: {script_path}")
        
        if not removed:
            print("   ‚ÑπÔ∏è  No se encontraron scripts para eliminar")

    def remove_waybar_module(self):
        """Eliminar configuraci√≥n del m√≥dulo waybar"""
        print("üß© Eliminando m√≥dulo waybar...")
        
        module_file = self.modules_dir / "custom-todolist.jsonc"
        if module_file.exists():
            module_file.unlink()
            print(f"   ‚úÖ Eliminado: {module_file}")
        else:
            print("   ‚ÑπÔ∏è  M√≥dulo waybar no encontrado")

    def update_user_layout(self):
        """Eliminar el m√≥dulo del layout del usuario"""
        print(f"üìù Actualizando layout: {self.user}.jsonc...")
        
        if not self.user_layout.exists():
            print("   ‚ÑπÔ∏è  Layout del usuario no encontrado")
            return
        
        try:
            with open(self.user_layout, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parsear JSON con comentarios
            json_content = re.sub(r'//.*?\n', '\n', content)
            json_content = re.sub(r'/\*.*?\*/', '', json_content, flags=re.DOTALL)
            
            layout = json.loads(json_content)
            
            # Buscar y eliminar referencias al m√≥dulo
            module_removed = False
            empty_groups = []
            
            for key, value in layout.items():
                if isinstance(value, dict) and "modules" in value:
                    if "custom/todolist" in value["modules"]:
                        value["modules"].remove("custom/todolist")
                        module_removed = True
                        print(f"   ‚úÖ M√≥dulo removido de: {key}")
                        
                        # Si el grupo queda vac√≠o, marcarlo para eliminaci√≥n
                        if len(value["modules"]) == 0:
                            empty_groups.append(key)
            
            # Eliminar grupos vac√≠os
            for group in empty_groups:
                # Remover de modules-left, modules-center, modules-right
                for module_list_key in ["modules-left", "modules-center", "modules-right"]:
                    if module_list_key in layout and group in layout[module_list_key]:
                        layout[module_list_key].remove(group)
                        print(f"   ‚úÖ Grupo vac√≠o removido de {module_list_key}: {group}")
                
                # Eliminar definici√≥n del grupo
                if group in layout:
                    del layout[group]
                    print(f"   ‚úÖ Definici√≥n de grupo eliminada: {group}")
            
            if module_removed:
                # Guardar layout actualizado
                updated_json = json.dumps(layout, indent=4, ensure_ascii=False)
                with open(self.user_layout, 'w', encoding='utf-8') as f:
                    f.write(updated_json)
                print(f"   ‚úÖ Layout actualizado: {self.user_layout}")
            else:
                print("   ‚ÑπÔ∏è  M√≥dulo no encontrado en el layout")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error actualizando layout: {e}")

    def remove_data_directory(self):
        """Eliminar directorio de datos (opcional)"""
        if not self.data_dir.exists():
            print("   ‚ÑπÔ∏è  Directorio de datos no encontrado")
            return
        
        print(f"üìÅ Directorio de datos: {self.data_dir}")
        print("   ‚ö†Ô∏è  Este directorio contiene tus tareas guardadas")
        
        response = input("¬øEliminar tambi√©n el directorio de datos? [y/N]: ").lower().strip()
        
        if response in ['y', 'yes', 's√≠', 'si']:
            shutil.rmtree(self.data_dir)
            print(f"   ‚úÖ Directorio eliminado: {self.data_dir}")
        else:
            print(f"   ‚ÑπÔ∏è  Directorio conservado: {self.data_dir}")

    def update_waybar_includes(self):
        """Actualizar includes.json"""
        print("üîÑ Actualizando configuraci√≥n waybar...")
        
        try:
            waybar_py = self.home / ".local" / "lib" / "hyde" / "waybar.py"
            
            if not waybar_py.exists():
                print("   ‚ö†Ô∏è  waybar.py de HyDE no encontrado")
                return
            
            # Regenerar includes.json
            subprocess.run([
                str(waybar_py), "--generate-includes"
            ], check=True, capture_output=True, text=True)
            
            print("   ‚úÖ includes.json actualizado")
            
            # Actualizar configuraci√≥n
            subprocess.run([
                str(waybar_py), "--update"
            ], check=True, capture_output=True, text=True)
            
            print("   ‚úÖ Configuraci√≥n waybar sincronizada")
            
        except subprocess.CalledProcessError as e:
            print(f"   ‚ö†Ô∏è  Error actualizando waybar: {e}")

    def show_completion_message(self):
        """Mostrar mensaje de finalizaci√≥n"""
        print("\n‚úÖ ¬°Desinstalaci√≥n completada!")
        print("=" * 40)
        print("üßπ El m√≥dulo todolist ha sido eliminado del sistema")
        print()
        print("üîÑ Para aplicar los cambios:")
        print("   hyde-shell waybar -S    # Selector de layout")
        print("   # o")
        print("   ~/.local/lib/hyde/waybar.py --update")
        print()
        print("üí° Para reinstalar en el futuro:")
        print("   cd /ruta/al/proyecto/todolist/")
        print("   ./install.py")

    def run(self, skip_confirmation=False, quiet=False):
        """Ejecutar desinstalaci√≥n completa"""
        if not quiet:
            print("üìù Desinstalador del M√≥dulo Todolist")
            print("=" * 50)
        
        if not skip_confirmation and not self.confirm_uninstall():
            if not quiet:
                print("‚ùå Desinstalaci√≥n cancelada")
            return False
        
        try:
            if not quiet:
                print("\nüöÄ Iniciando desinstalaci√≥n...")
            
            self.remove_scripts()
            self.remove_waybar_module()
            self.update_user_layout()
            self.remove_data_directory()
            self.update_waybar_includes()
            
            if not quiet:
                self.show_completion_message()
            return True
            
        except Exception as e:
            if not quiet:
                print(f"‚ùå Error durante la desinstalaci√≥n: {e}")
            return False

def main():
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Desinstalar m√≥dulo todolist",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "--force", 
        action="store_true",
        help="Ejecutar desinstalaci√≥n sin pedir confirmaci√≥n"
    )
    
    parser.add_argument(
        "--quiet", 
        action="store_true", 
        help="Ejecutar en modo silencioso"
    )
    
    args = parser.parse_args()
    
    # Mostrar confirmaci√≥n solo si no es --force
    if not args.force and not args.quiet:
        print("\nüóëÔ∏è  DESINSTALACI√ìN DEL M√ìDULO TODOLIST")
        print("=" * 50)
        print("Se eliminar√°n:")
        print("  ‚Ä¢ Scripts de ~/.local/bin")
        print("  ‚Ä¢ Configuraci√≥n de waybar")
        print("  ‚Ä¢ Referencias en layouts")
        print("\n‚ö†Ô∏è  Los archivos de tareas (.md) se conservar√°n")
        
        respuesta = input("\n¬øContinuar con la desinstalaci√≥n? [s/N]: ").lower().strip()
        if respuesta not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("Desinstalaci√≥n cancelada")
            return False
    
    try:
        uninstaller = HyDETodolistUninstaller()
        success = uninstaller.run(skip_confirmation=args.force, quiet=args.quiet)
        
        if success and not args.quiet:
            print("\nüéâ ¬°Desinstalaci√≥n completada exitosamente!")
            print("============================================================")
            print("‚úÖ El m√≥dulo todolist ha sido completamente eliminado")
            print("‚úÖ Configuraciones de waybar limpiadas")
            print("‚úÖ Scripts eliminados de ~/.local/bin")
            print("\nüí° Para reinstalar, ejecuta: ./install.py")
        return success
        
    except KeyboardInterrupt:
        if not args.quiet:
            print("\n\n‚ö†Ô∏è  Desinstalaci√≥n cancelada por el usuario")
        return False
    except Exception as e:
        if not args.quiet:
            print(f"\n‚ùå Error inesperado durante la desinstalaci√≥n: {e}")
        return False

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
